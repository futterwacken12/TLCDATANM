@model CHS.TLC.Data.NM.Web.Areas.Intranet.ViewModels.Report.KardexValorizedViewModel
@{
    ViewBag.Title = "Kardex Valorizado";
    ViewBag.PageIcon = "bar-chart";
}
@section Breadcrumbs{
}

<style>
    .input-append, .input-prepend {
        display: flex !important;
    }
</style>

<div class="row-fluid">
    <div class="col-lg-12">
        <div class="pull-left">
            &nbsp;
        </div>
        <div class="pull-right">
            @Html.EncodedActionLink(Html.Raw("<i class='icon icon-arrow-left'></i> Atrás"), "MainOption", "Home", "Intranet", new { FatherId = Model.FatherId }, new { @class = "'btn btn-primary'" })
        </div>
    </div>
</div>
<br />
<div class="row-fluid">
    <div class="span12 box bordered-box green-border">
        <div class="box-header green-background">
            <div class="title">
                <i class="icon-filter"></i>
                Filtros
            </div>
        </div>
        <div class="box-content box-double-padding">
            <form class="form" method="post" style="margin-bottom: 0;">
                <fieldset>
                    <div class="span2">
                        <strong>Fecha Inicio</strong>
                        <div class="datepicker input-append" id="datepicker" style="padding-left: 0%; padding: unset;">
                            @Html.TextBoxFor(x => x.FechaInicio, new { @class = "input-block-level", @placeholder = "Fecha Inicio", @data_format = "dd/MM/yyyy" })
                            <span class="add-on">
                                <i data-date-icon="icon-calendar" data-time-icon="icon-time" class="icon-calendar"></i>
                            </span>
                        </div>
                    </div>
                    <div class="span2">
                        <strong>Fecha Fin</strong><br />
                        <div class="datepicker input-append" id="datepicker" style="padding-left: 0%; padding: unset;">
                            @Html.TextBoxFor(x => x.FechaFin, new { @class = "span12", @placeholder = "Fecha Fin", @data_format = "dd/MM/yyyy" })
                            <span class="add-on">
                                <i data-date-icon="icon-calendar" data-time-icon="icon-time" class="icon-calendar"></i>
                            </span>
                        </div>
                    </div>
                    <div class="span4">
                        <strong>Almacén</strong>
                        @Html.DropDownListFor(x => x.StoreId, new SelectList(Model.LstStore, "StoreId", "Name"), new { @class = "select2 span12" })
                    </div>
                    <div class="span4">
                        <strong>Producto</strong>
                        <select id="StockProductId" name="StockProductId" class="span12"></select>
                    </div>
                </fieldset>

                <hr class="hr-normal">

                <div class="form-actions" style="margin-bottom: 0;">
                    <div class="text-right">
                        <button class="btn btn-primary"><i class="icon-filter"></i> Filtrar</button>
                        <a href="@Url.Action("KardexValorized", "Report")" class="btn btn-default"><i class="icon-eraser"></i> Limpiar</a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<br />
<div class="row-fluid">
    <div class="span12 box bordered-box green-border" style="margin-bottom:0;">
        <div class="box-header green-background">
            <div class="title"><i class="icon-reorder"></i> Resultados</div>
        </div>
        <div class="box-content box-no-padding">
            <div>
                @foreach (var stockProduct in Model.DStockProduct)
                {
                    <div class="responsive-table">
                        <div class="scrollable-area">
                            <table class="table table-bordered" style="margin-bottom:0;">
                                <tbody>
                                    <tr>
                                        <td colspan="9" style="text-align: center; vertical-align: middle;"><strong>COSTO PROMEDIO O PROMEDIO PONDERADO</strong></td>
                                    </tr>
                                    <tr>
                                        <td colspan="9" style="text-align: center; vertical-align: middle;"><strong>Movimiento de Almacén ( @stockProduct.Value.ToUpper() )</strong></td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2" style="text-align: center; vertical-align: middle;">Fecha</td>

                                        <td colspan="2" style="text-align: center; vertical-align: middle;">Especie</td>
                                        <td style="text-align: center; vertical-align: middle;" rowspan="2">Stock Final</td>
                                        <td style="text-align: center; vertical-align: middle;" rowspan="2">$/Unidad Entrada</td>
                                        <td style="text-align: center; vertical-align: middle;" rowspan="2">Valor Promedio</td>
                                        <td style="text-align: center; vertical-align: middle;" colspan="2">Valores</td>

                                        <td style="text-align: center; vertical-align: middle;" rowspan="2">Kardex Valorizado</td>
                                    </tr>
                                    <tr>
                                        <td style="text-align: center; vertical-align: middle;">Stock Inicial</td>
                                        <td style="text-align: center; vertical-align: middle;">Salida</td>

                                        <td style="text-align: center; vertical-align: middle;">Debe</td>
                                        <td style="text-align: center; vertical-align: middle;">Haber</td>
                                    </tr>
                                    @{ Decimal? exist = 0; Decimal? saldo = 0; Decimal? costoMedio = 0; Int32 i = 1; String currency = String.Empty;}

                                    @foreach (var item in Model.LstStockProductDetail.Where(x => x.StockProductId == stockProduct.Key))
                                    {
                                        if (String.IsNullOrEmpty(currency))
                                        {
                                            currency = (item.Currency != null ? item.Currency.Sign : String.Empty);
                                        }


                                        saldo += (item.Operation == ConstantHelpers.OPERATION.ENTRY ? (item.Value * item.CUPrice) : ((-1) * item.Value * costoMedio));
                                        exist = exist + (item.Value * (item.Operation == ConstantHelpers.OPERATION.ENTRY ? 1 : (-1)));
                                        <tr>
                                            <td>@item.Date.ToString("dd/MM/yyyy")</td>
                                            <td>@(item.Operation == ConstantHelpers.OPERATION.ENTRY ? item.Value.ToString("#,##0.00") : String.Empty)</td>
                                            <td>@(item.Operation == ConstantHelpers.OPERATION.OUTPUT ? item.Value.ToString("#,##0.00") : String.Empty)</td>
                                            <td>@exist</td>
                                            <td>@(item.Operation == ConstantHelpers.OPERATION.ENTRY ? (currency + " " + item.CUPrice.ToString()) : String.Empty)</td>
                                            <td>@(item.Operation == ConstantHelpers.OPERATION.ENTRY ? String.Empty : (currency + " " + (costoMedio).Value.ToString("#,##0.00")))</td>
                                            <td>@(item.Operation == ConstantHelpers.OPERATION.ENTRY ? (item.Value * item.CUPrice).Value.ToString("#,##0.00") : String.Empty)</td>
                                            <td>@(item.Operation == ConstantHelpers.OPERATION.ENTRY ? String.Empty : (item.Value * costoMedio.Value).ToString("#,##0.00"))</td>
                                            <td>@saldo.Value.ToString("#,##0.00")</td>
                                        </tr>
                                        if (item.Operation == ConstantHelpers.OPERATION.ENTRY)
                                        {
                                            i++;
                                        }
                                        if (item.Operation == ConstantHelpers.OPERATION.ENTRY)
                                        {
                                            costoMedio = saldo / exist;
                                        }
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                 }
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        $(document).on('ready', function () {

            $('#StockProductId').select2({
                ajax: {
                    url: '@Url.Action("GetStockProduct", "Json")',
                    dataType: 'json',
                    type: "GET",
                    data: function (params) {
                        return {
                            q: params.term,
                            StoreId: $('#StoreId').val()
                        };
                    },
                    processResults: function (data) {
                        var arr = [];
                        $.each(data, function (index, value) {
                            arr.push({
                                id: value.id,
                                text: value.text
                            });
                        });
                        return {
                            results: arr
                        };
                    },
                    initSelection: function (element, callback) {
                        callback({ id: '@Model.StockProductId', text: '@Model.DescriptionInvoice' });
                    }
                },
                minimumInputLength: 3
            });

            @if (Model.StockProductId.HasValue) {
                <text>
                     var newOption = new Option('@Model.DescriptionInvoice', '@Model.StockProductId', true, true);
                     $("#StockProductId").append(newOption).trigger('change');
                </text>
            }
        });
    </script>
}